/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as authenticatedRouteRouteImport } from './routes/(authenticated)/route'
import { Route as publicIndexRouteImport } from './routes/(public)/index'
import { Route as authSignupRouteImport } from './routes/(auth)/signup'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as authenticatedOrgNewRouteImport } from './routes/(authenticated)/org/new'
import { Route as authenticatedOrgSlugIndexRouteImport } from './routes/(authenticated)/org/$slug/index'

const authenticatedRouteRoute = authenticatedRouteRouteImport.update({
  id: '/(authenticated)',
  getParentRoute: () => rootRouteImport,
} as any)
const publicIndexRoute = publicIndexRouteImport.update({
  id: '/(public)/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const authSignupRoute = authSignupRouteImport.update({
  id: '/(auth)/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const authenticatedOrgNewRoute = authenticatedOrgNewRouteImport.update({
  id: '/org/new',
  path: '/org/new',
  getParentRoute: () => authenticatedRouteRoute,
} as any)
const authenticatedOrgSlugIndexRoute =
  authenticatedOrgSlugIndexRouteImport.update({
    id: '/org/$slug/',
    path: '/org/$slug/',
    getParentRoute: () => authenticatedRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof publicIndexRoute
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/org/new': typeof authenticatedOrgNewRoute
  '/org/$slug': typeof authenticatedOrgSlugIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof publicIndexRoute
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/org/new': typeof authenticatedOrgNewRoute
  '/org/$slug': typeof authenticatedOrgSlugIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(authenticated)': typeof authenticatedRouteRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/signup': typeof authSignupRoute
  '/(public)/': typeof publicIndexRoute
  '/(authenticated)/org/new': typeof authenticatedOrgNewRoute
  '/(authenticated)/org/$slug/': typeof authenticatedOrgSlugIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/signup' | '/org/new' | '/org/$slug'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/signup' | '/org/new' | '/org/$slug'
  id:
    | '__root__'
    | '/(authenticated)'
    | '/(auth)/login'
    | '/(auth)/signup'
    | '/(public)/'
    | '/(authenticated)/org/new'
    | '/(authenticated)/org/$slug/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  authenticatedRouteRoute: typeof authenticatedRouteRouteWithChildren
  authLoginRoute: typeof authLoginRoute
  authSignupRoute: typeof authSignupRoute
  publicIndexRoute: typeof publicIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(authenticated)': {
      id: '/(authenticated)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(public)/': {
      id: '/(public)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/signup': {
      id: '/(auth)/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(authenticated)/org/new': {
      id: '/(authenticated)/org/new'
      path: '/org/new'
      fullPath: '/org/new'
      preLoaderRoute: typeof authenticatedOrgNewRouteImport
      parentRoute: typeof authenticatedRouteRoute
    }
    '/(authenticated)/org/$slug/': {
      id: '/(authenticated)/org/$slug/'
      path: '/org/$slug'
      fullPath: '/org/$slug'
      preLoaderRoute: typeof authenticatedOrgSlugIndexRouteImport
      parentRoute: typeof authenticatedRouteRoute
    }
  }
}

interface authenticatedRouteRouteChildren {
  authenticatedOrgNewRoute: typeof authenticatedOrgNewRoute
  authenticatedOrgSlugIndexRoute: typeof authenticatedOrgSlugIndexRoute
}

const authenticatedRouteRouteChildren: authenticatedRouteRouteChildren = {
  authenticatedOrgNewRoute: authenticatedOrgNewRoute,
  authenticatedOrgSlugIndexRoute: authenticatedOrgSlugIndexRoute,
}

const authenticatedRouteRouteWithChildren =
  authenticatedRouteRoute._addFileChildren(authenticatedRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  authenticatedRouteRoute: authenticatedRouteRouteWithChildren,
  authLoginRoute: authLoginRoute,
  authSignupRoute: authSignupRoute,
  publicIndexRoute: publicIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
